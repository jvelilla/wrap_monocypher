note
	description: "Summary description for {MONOCYPHER_FUNCTIONS}."
	date: "$Date$"
	revision: "$Revision$"

class
	MONOCYPHER_FUNCTIONS

inherit

	MONOCYPHER_FUNCTIONS_API
		rename
			crypto_verify16 as crypto_verify16_api,
			crypto_verify32 as crypto_verify32_api,
			crypto_verify64 as crypto_verify64_api,
			crypto_x25519 as crypto_x25519_api,
			crypto_x25519_public_key as crypto_x25519_public_key_api
		end

feature -- Comparisons

	crypto_verify16 (a: ARRAY [NATURAL_8]; b: ARRAY [NATURAL_8]): BOOLEAN
		require
			valid_size: a.count = 16 and then b.count = 16
		do
			Result := c_crypto_verify16 (a.area.base_address, b.area.base_address).to_boolean
		ensure
			instance_free: class
		end

	crypto_verify32 (a: ARRAY [NATURAL_8]; b: ARRAY [NATURAL_8]): BOOLEAN
		require
				valid_size: a.count = 32 and then b.count = 32
		do
			Result := c_crypto_verify32 (a.area.base_address, b.area.base_address).to_boolean
		ensure
			instance_free: class
		end

	crypto_verify64 (a: ARRAY [NATURAL_8]; b: ARRAY [NATURAL_8]): BOOLEAN
		require
				valid_size: a.count = 32 and then b.count = 32
		do
			Result := c_crypto_verify64 (a.area.base_address, b.area.base_address).to_boolean
		ensure
			instance_free: class
		end

feature -- Key generator

	generate_key_with_chacha20: ARRAY [NATURAL_8]
			-- Generate a random key
			-- Uses ChaCha20 cipher to the XhortShifr's random
			-- number generator to increase entropy
		local
			salt: SALT_XOR_SHIFT_64_GENERATOR
			key: ARRAY [NATURAL_8]
			nonce: ARRAY [NATURAL_8]
			message: ARRAY [NATURAL_8]
		do
			create salt.make (32)
			key := salt.new_sequence
			create salt.make (24)
			nonce:= salt.new_sequence
			create salt.make (32)
			message := salt.new_sequence
			Result := chacha20 (key, nonce, message)
		ensure
			Result_count: Result.count = 32
			instance_free: class
		end

	generate_key_exchange_key_pair: TUPLE [secret: ARRAY [NATURAL_8]; public: ARRAY [NATURAL_8]]
			-- Generate a new keypair for key exchange using default settings.
			-- Result a tuple with secret, public keys
		local
			secret: ARRAY [NATURAL_8]
			public: ARRAY [NATURAL_8]
		do
			secret := generate_key_with_chacha20
    		public := compute_key_exchange_public_key (secret)
			Result := [secret, public]
		ensure
			instance_free: class
		end

feature -- Chacha20  Specialised hash.

	chacha20 (a_key: ARRAY [NATURAL_8]; a_nonce: ARRAY [NATURAL_8]; a_message: ARRAY [NATURAL_8]): ARRAY [NATURAL_8]
			-- Encrypt/Decrypt a message with ChaCha20.
			-- a_kye: The 32 byte shared secret key.
			-- a_nonce: 24-byte or 8-byte nonce.
			-- message to encrypt or decrypt.
			-- Result: the message XOR'ed with the Chacha20 stream.
		require
			valid_key_lenght: a_key.count = 32
			valid_nonce_lenght:  a_nonce.count = 24 or else a_nonce.count = 8
		do
			create Result.make_filled (0, 1, a_message.count)
			if a_nonce.count = 24 then
				c_crypto_xchacha20 (Result.area.base_address, a_message.area.base_address, a_message.count, a_key.area.base_address, a_nonce.area.base_address)
			else
				c_crypto_chacha20 (Result.area.base_address, a_message.area.base_address, a_message.count, a_key.area.base_address, a_nonce.area.base_address)
			end
		ensure
			instance_free: class
		end

feature -- Generate public key

	compute_signing_public_key (secret_key: ARRAY [NATURAL_8]): ARRAY [NATURAL_8]
			-- Generate the public key from the secret key.
			-- `secret_key`: The 32-byte secret key.
			-- Result: 32-byte publick key
		require
			valid_count:  secret_key.count = 32
		do
			create Result.make_filled (0, 1, 32)
			crypto_sign_public_key (Result.area.base_address, secret_key.area.base_address)
		ensure
			instance_free: class
		end

	signature_sign (secret_key: ARRAY [NATURAL_8]; message: ARRAY [NATURAL_8]): ARRAY [NATURAL_8]
			-- Cryptographically sign a messge.
			-- secret_key: Your 32-byte secret key.
			-- message: the message to sing
    		-- Result 64-byte signature of message.
		local
			sig: ARRAY [NATURAL_8]
			kp: ARRAY [NATURAL_8]
		do
			create sig.make_filled (0, 1, 64)
			create kp.make_filled (0, 1, 64)
			crypto_sign_public_key (kp.area.base_address, secret_key.area.base_address)
			c_crypto_sign (sig.area.base_address, secret_key.area.base_address, kp.area.base_address, message.area.base_address, message.count)
			Result := sig
		ensure
			instance_free: class
		end

	signature_check (signature: ARRAY [NATURAL_8]; public_key: ARRAY [NATURAL_8]; message: ARRAY [NATURAL_8]): BOOLEAN
			-- Verify the signature.
			-- signature: 64-byte signature generated by featyre `signature_sign`.
			-- public_key: The publicj key matching the secrect key provided to feature `signature_sign` that
			-- generate the signature
			-- message: the message to check
			-- Result: True if the message verifies correctly, false in other case.
		do
			Result := (0 = c_crypto_check (signature.area.base_address, public_key.area.base_address, message.area.base_address, message.count))
		ensure
			instance_free: class
		end

feature -- X-25519

	compute_key_exchange_public_key (secret_key: ARRAY [NATURAL_8]) : ARRAY [NATURAL_8]
			-- Generate the `public_key` for key exchange from the secret key.
			-- `secret_key`: 32-byte secret key.
			-- Result The 32-byte `public_key` for feature `key_exchange`.
		require
			valid_count:  secret_key.count = 32
		do
			create Result.make_filled (0, 1, 32)
			c_crypto_x25519_public_key (Result.area.base_address, secret_key.area.base_address)
		ensure
			instance_free: class
		end

	key_exchange ( your_secret_key:  ARRAY[NATURAL_8]; their_public_key:  ARRAY[NATURAL_8]): ARRAY[NATURAL_8]
			-- Compute a shared_ ecret based upon `public-key` crytography.
			-- `your_secret_key`: Your private, secret 32-byte key.
			-- `their_public_key`: Their public 32-byte key.
			-- Result: A 32-byte shared secret that will match what is computed using `their_secret_key` and `your_public_key`.
		require
			valid_count:  your_secret_key.count = 32 and then their_public_key.count = 32
		do
			create Result.make_filled (0, 1, 32)
			c_crypto_x25519 (Result.area.base_address, your_secret_key.area.base_address, their_public_key.area.base_address)
		ensure
			instance_free: class
		end




end
