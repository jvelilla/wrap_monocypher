note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class CRYPTO_BLAKE2B_CTX_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	hash: POINTER
			-- Access member `hash`
		require
			exists: exists
		do
			Result := c_hash (item)
		ensure
			result_correct: Result = c_hash (item)
		end

	input_offset: POINTER
			-- Access member `input_offset`
		require
			exists: exists
		do
			Result := c_input_offset (item)
		ensure
			result_correct: Result = c_input_offset (item)
		end

	input: POINTER
			-- Access member `input`
		require
			exists: exists
		do
			Result := c_input (item)
		ensure
			result_correct: Result = c_input (item)
		end

	input_idx: INTEGER
			-- Access member `input_idx`
		require
			exists: exists
		do
			Result := c_input_idx (item)
		ensure
			result_correct: Result = c_input_idx (item)
		end

	set_input_idx (a_value: INTEGER) 
			-- Change the value of member `input_idx` to `a_value`.
		require
			exists: exists
		do
			set_c_input_idx (item, a_value)
		ensure
			input_idx_set: a_value = input_idx
		end

	hash_size: INTEGER
			-- Access member `hash_size`
		require
			exists: exists
		do
			Result := c_hash_size (item)
		ensure
			result_correct: Result = c_hash_size (item)
		end

	set_hash_size (a_value: INTEGER) 
			-- Change the value of member `hash_size` to `a_value`.
		require
			exists: exists
		do
			set_c_hash_size (item, a_value)
		ensure
			hash_size_set: a_value = hash_size
		end

feature {NONE} -- Implementation wrapper for struct crypto_blake2b_ctx

	sizeof_external: INTEGER 
		external
			"C inline use <monocypher.h>"
		alias
			"sizeof(crypto_blake2b_ctx)"
		end

	c_hash (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <monocypher.h>"
		alias
			"[
				((crypto_blake2b_ctx*)$an_item)->hash
			]"
		end

	c_input_offset (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <monocypher.h>"
		alias
			"[
				((crypto_blake2b_ctx*)$an_item)->input_offset
			]"
		end

	c_input (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <monocypher.h>"
		alias
			"[
				((crypto_blake2b_ctx*)$an_item)->input
			]"
		end

	c_input_idx (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <monocypher.h>"
		alias
			"[
				((crypto_blake2b_ctx*)$an_item)->input_idx
			]"
		end

	set_c_input_idx (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <monocypher.h>"
		alias
			"[
				((crypto_blake2b_ctx*)$an_item)->input_idx =  (size_t)$a_value
			]"
		ensure
			input_idx_set: a_value = c_input_idx (an_item)
		end

	c_hash_size (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <monocypher.h>"
		alias
			"[
				((crypto_blake2b_ctx*)$an_item)->hash_size
			]"
		end

	set_c_hash_size (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <monocypher.h>"
		alias
			"[
				((crypto_blake2b_ctx*)$an_item)->hash_size =  (size_t)$a_value
			]"
		ensure
			hash_size_set: a_value = c_hash_size (an_item)
		end

end
