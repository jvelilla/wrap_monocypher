note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class MONOCYPHER_FUNCTIONS_API


feature -- Access

	crypto_verify16 (a: POINTER; b: POINTER): INTEGER 
		do
			Result := c_crypto_verify16 (a, b)
		ensure
			instance_free: class
		end

	crypto_verify32 (a: POINTER; b: POINTER): INTEGER 
		do
			Result := c_crypto_verify32 (a, b)
		ensure
			instance_free: class
		end

	crypto_verify64 (a: POINTER; b: POINTER): INTEGER 
		do
			Result := c_crypto_verify64 (a, b)
		ensure
			instance_free: class
		end

	crypto_wipe (secret: POINTER; size: INTEGER) 
		do
			c_crypto_wipe (secret, size)
		ensure
			instance_free: class
		end

	crypto_lock (mac: POINTER; cipher_text: STRING_8; key: POINTER; nonce: POINTER; plain_text: STRING_8; text_size: INTEGER) 
		local
			cipher_text_c_string: C_STRING
			plain_text_c_string: C_STRING
		do
			create cipher_text_c_string.make (cipher_text)
			create plain_text_c_string.make (plain_text)
			c_crypto_lock (mac, cipher_text_c_string.item, key, nonce, plain_text_c_string.item, text_size)
		ensure
			instance_free: class
		end

	crypto_unlock (plain_text: STRING_8; key: POINTER; nonce: POINTER; mac: POINTER; cipher_text: STRING_8; text_size: INTEGER): INTEGER 
		local
			plain_text_c_string: C_STRING
			cipher_text_c_string: C_STRING
		do
			create plain_text_c_string.make (plain_text)
			create cipher_text_c_string.make (cipher_text)
			Result := c_crypto_unlock (plain_text_c_string.item, key, nonce, mac, cipher_text_c_string.item, text_size)
		ensure
			instance_free: class
		end

	crypto_lock_aead (mac: POINTER; cipher_text: STRING_8; key: POINTER; nonce: POINTER; ad: STRING_8; ad_size: INTEGER; plain_text: STRING_8; text_size: INTEGER) 
		local
			cipher_text_c_string: C_STRING
			ad_c_string: C_STRING
			plain_text_c_string: C_STRING
		do
			create cipher_text_c_string.make (cipher_text)
			create ad_c_string.make (ad)
			create plain_text_c_string.make (plain_text)
			c_crypto_lock_aead (mac, cipher_text_c_string.item, key, nonce, ad_c_string.item, ad_size, plain_text_c_string.item, text_size)
		ensure
			instance_free: class
		end

	crypto_unlock_aead (plain_text: STRING_8; key: POINTER; nonce: POINTER; mac: POINTER; ad: STRING_8; ad_size: INTEGER; cipher_text: STRING_8; text_size: INTEGER): INTEGER 
		local
			plain_text_c_string: C_STRING
			ad_c_string: C_STRING
			cipher_text_c_string: C_STRING
		do
			create plain_text_c_string.make (plain_text)
			create ad_c_string.make (ad)
			create cipher_text_c_string.make (cipher_text)
			Result := c_crypto_unlock_aead (plain_text_c_string.item, key, nonce, mac, ad_c_string.item, ad_size, cipher_text_c_string.item, text_size)
		ensure
			instance_free: class
		end

	crypto_blake2b (hash: POINTER; message: STRING_8; message_size: INTEGER) 
		local
			message_c_string: C_STRING
		do
			create message_c_string.make (message)
			c_crypto_blake2b (hash, message_c_string.item, message_size)
		ensure
			instance_free: class
		end

	crypto_blake2b_general (hash: POINTER; hash_size: INTEGER; key: POINTER; key_size: INTEGER; message: POINTER; message_size: INTEGER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_blake2b_general ((uint8_t*)$hash, (size_t)$hash_size, (uint8_t const*)$key, (size_t)$key_size, (uint8_t const*)$message, (size_t)$message_size);
			]"
		end

	crypto_blake2b_init (ctx: CRYPTO_BLAKE2B_CTX_STRUCT_API) 
		do
			c_crypto_blake2b_init (ctx.item)
		ensure
			instance_free: class
		end

	crypto_blake2b_update (ctx: CRYPTO_BLAKE2B_CTX_STRUCT_API; message: STRING_8; message_size: INTEGER) 
		local
			message_c_string: C_STRING
		do
			create message_c_string.make (message)
			c_crypto_blake2b_update (ctx.item, message_c_string.item, message_size)
		ensure
			instance_free: class
		end

	crypto_blake2b_final (ctx: CRYPTO_BLAKE2B_CTX_STRUCT_API; hash: STRING_8) 
		local
			hash_c_string: C_STRING
		do
			create hash_c_string.make (hash)
			c_crypto_blake2b_final (ctx.item, hash_c_string.item)
		ensure
			instance_free: class
		end

	crypto_blake2b_general_init (ctx: CRYPTO_BLAKE2B_CTX_STRUCT_API; hash_size: INTEGER; key: STRING_8; key_size: INTEGER) 
		local
			key_c_string: C_STRING
		do
			create key_c_string.make (key)
			c_crypto_blake2b_general_init (ctx.item, hash_size, key_c_string.item, key_size)
		ensure
			instance_free: class
		end

	crypto_argon2i (hash: STRING_8; hash_size: INTEGER; work_area: POINTER; nb_blocks: INTEGER; nb_iterations: INTEGER; password: STRING_8; password_size: INTEGER; salt: STRING_8; salt_size: INTEGER) 
		local
			hash_c_string: C_STRING
			password_c_string: C_STRING
			salt_c_string: C_STRING
		do
			create hash_c_string.make (hash)
			create password_c_string.make (password)
			create salt_c_string.make (salt)
			c_crypto_argon2i (hash_c_string.item, hash_size, work_area, nb_blocks, nb_iterations, password_c_string.item, password_size, salt_c_string.item, salt_size)
		ensure
			instance_free: class
		end

	crypto_argon2i_general (hash: STRING_8; hash_size: INTEGER; work_area: POINTER; nb_blocks: INTEGER; nb_iterations: INTEGER; password: STRING_8; password_size: INTEGER; salt: STRING_8; salt_size: INTEGER; key: STRING_8; key_size: INTEGER; ad: STRING_8; ad_size: INTEGER) 
		local
			hash_c_string: C_STRING
			password_c_string: C_STRING
			salt_c_string: C_STRING
			key_c_string: C_STRING
			ad_c_string: C_STRING
		do
			create hash_c_string.make (hash)
			create password_c_string.make (password)
			create salt_c_string.make (salt)
			create key_c_string.make (key)
			create ad_c_string.make (ad)
			c_crypto_argon2i_general (hash_c_string.item, hash_size, work_area, nb_blocks, nb_iterations, password_c_string.item, password_size, salt_c_string.item, salt_size, key_c_string.item, key_size, ad_c_string.item, ad_size)
		ensure
			instance_free: class
		end

	crypto_key_exchange (shared_key: POINTER; your_secret_key: POINTER; their_public_key: POINTER) 
		do
			c_crypto_key_exchange (shared_key, your_secret_key, their_public_key)
		ensure
			instance_free: class
		end

	crypto_sign_public_key (public_key: POINTER; secret_key: POINTER) 
		do
			c_crypto_sign_public_key (public_key, secret_key)
		ensure
			instance_free: class
		end

	crypto_sign (signature: POINTER; secret_key: POINTER; public_key: POINTER; message: STRING_8; message_size: INTEGER) 
		local
			message_c_string: C_STRING
		do
			create message_c_string.make (message)
			c_crypto_sign (signature, secret_key, public_key, message_c_string.item, message_size)
		ensure
			instance_free: class
		end

	crypto_check (signature: POINTER; public_key: POINTER; message: STRING_8; message_size: INTEGER): INTEGER 
		local
			message_c_string: C_STRING
		do
			create message_c_string.make (message)
			Result := c_crypto_check (signature, public_key, message_c_string.item, message_size)
		ensure
			instance_free: class
		end

	crypto_sign_init_first_pass (ctx: CRYPTO_SIGN_CTX_ABSTRACT_STRUCT_API; secret_key: POINTER; public_key: POINTER) 
		do
			c_crypto_sign_init_first_pass (ctx.item, secret_key, public_key)
		ensure
			instance_free: class
		end

	crypto_sign_update (ctx: CRYPTO_SIGN_CTX_ABSTRACT_STRUCT_API; message: STRING_8; message_size: INTEGER) 
		local
			message_c_string: C_STRING
		do
			create message_c_string.make (message)
			c_crypto_sign_update (ctx.item, message_c_string.item, message_size)
		ensure
			instance_free: class
		end

	crypto_sign_init_second_pass (ctx: CRYPTO_SIGN_CTX_ABSTRACT_STRUCT_API) 
		do
			c_crypto_sign_init_second_pass (ctx.item)
		ensure
			instance_free: class
		end

	crypto_sign_final (ctx: CRYPTO_SIGN_CTX_ABSTRACT_STRUCT_API; signature: POINTER) 
		do
			c_crypto_sign_final (ctx.item, signature)
		ensure
			instance_free: class
		end

	crypto_check_init (ctx: CRYPTO_SIGN_CTX_ABSTRACT_STRUCT_API; signature: POINTER; public_key: POINTER) 
		do
			c_crypto_check_init (ctx.item, signature, public_key)
		ensure
			instance_free: class
		end

	crypto_check_update (ctx: CRYPTO_SIGN_CTX_ABSTRACT_STRUCT_API; message: STRING_8; message_size: INTEGER) 
		local
			message_c_string: C_STRING
		do
			create message_c_string.make (message)
			c_crypto_check_update (ctx.item, message_c_string.item, message_size)
		ensure
			instance_free: class
		end

	crypto_check_final (ctx: CRYPTO_SIGN_CTX_ABSTRACT_STRUCT_API): INTEGER 
		do
			Result := c_crypto_check_final (ctx.item)
		ensure
			instance_free: class
		end

	crypto_sign_public_key_custom_hash (public_key: POINTER; secret_key: POINTER; hash: CRYPTO_SIGN_VTABLE_STRUCT_API) 
		do
			c_crypto_sign_public_key_custom_hash (public_key, secret_key, hash.item)
		ensure
			instance_free: class
		end

	crypto_sign_init_first_pass_custom_hash (ctx: CRYPTO_SIGN_CTX_ABSTRACT_STRUCT_API; secret_key: POINTER; public_key: POINTER; hash: CRYPTO_SIGN_VTABLE_STRUCT_API) 
		do
			c_crypto_sign_init_first_pass_custom_hash (ctx.item, secret_key, public_key, hash.item)
		ensure
			instance_free: class
		end

	crypto_check_init_custom_hash (ctx: CRYPTO_SIGN_CTX_ABSTRACT_STRUCT_API; signature: POINTER; public_key: POINTER; hash: CRYPTO_SIGN_VTABLE_STRUCT_API) 
		do
			c_crypto_check_init_custom_hash (ctx.item, signature, public_key, hash.item)
		ensure
			instance_free: class
		end

	crypto_from_eddsa_private (x25519: POINTER; eddsa: POINTER) 
		do
			c_crypto_from_eddsa_private (x25519, eddsa)
		ensure
			instance_free: class
		end

	crypto_from_eddsa_public (x25519: POINTER; eddsa: POINTER) 
		do
			c_crypto_from_eddsa_public (x25519, eddsa)
		ensure
			instance_free: class
		end

	crypto_hidden_to_curve (curve: POINTER; hidden: POINTER) 
		do
			c_crypto_hidden_to_curve (curve, hidden)
		ensure
			instance_free: class
		end

	crypto_curve_to_hidden (hidden: POINTER; curve: POINTER; tweak: INTEGER): INTEGER 
		do
			Result := c_crypto_curve_to_hidden (hidden, curve, tweak)
		ensure
			instance_free: class
		end

	crypto_hidden_key_pair (hidden: POINTER; secret_key: POINTER; seed: POINTER) 
		do
			c_crypto_hidden_key_pair (hidden, secret_key, seed)
		ensure
			instance_free: class
		end

	crypto_hchacha20 (a_out: POINTER; key: POINTER; in: POINTER) 
		do
			c_crypto_hchacha20 (a_out, key, in)
		ensure
			instance_free: class
		end

	crypto_chacha20 (cipher_text: STRING_8; plain_text: STRING_8; text_size: INTEGER; key: POINTER; nonce: POINTER) 
		local
			cipher_text_c_string: C_STRING
			plain_text_c_string: C_STRING
		do
			create cipher_text_c_string.make (cipher_text)
			create plain_text_c_string.make (plain_text)
			c_crypto_chacha20 (cipher_text_c_string.item, plain_text_c_string.item, text_size, key, nonce)
		ensure
			instance_free: class
		end

	crypto_xchacha20 (cipher_text: STRING_8; plain_text: STRING_8; text_size: INTEGER; key: POINTER; nonce: POINTER) 
		local
			cipher_text_c_string: C_STRING
			plain_text_c_string: C_STRING
		do
			create cipher_text_c_string.make (cipher_text)
			create plain_text_c_string.make (plain_text)
			c_crypto_xchacha20 (cipher_text_c_string.item, plain_text_c_string.item, text_size, key, nonce)
		ensure
			instance_free: class
		end

	crypto_ietf_chacha20 (cipher_text: STRING_8; plain_text: STRING_8; text_size: INTEGER; key: POINTER; nonce: POINTER) 
		local
			cipher_text_c_string: C_STRING
			plain_text_c_string: C_STRING
		do
			create cipher_text_c_string.make (cipher_text)
			create plain_text_c_string.make (plain_text)
			c_crypto_ietf_chacha20 (cipher_text_c_string.item, plain_text_c_string.item, text_size, key, nonce)
		ensure
			instance_free: class
		end

	crypto_chacha20_ctr (cipher_text: STRING_8; plain_text: STRING_8; text_size: INTEGER; key: POINTER; nonce: POINTER; ctr: INTEGER): INTEGER 
		local
			cipher_text_c_string: C_STRING
			plain_text_c_string: C_STRING
		do
			create cipher_text_c_string.make (cipher_text)
			create plain_text_c_string.make (plain_text)
			Result := c_crypto_chacha20_ctr (cipher_text_c_string.item, plain_text_c_string.item, text_size, key, nonce, ctr)
		ensure
			instance_free: class
		end

	crypto_xchacha20_ctr (cipher_text: STRING_8; plain_text: STRING_8; text_size: INTEGER; key: POINTER; nonce: POINTER; ctr: INTEGER): INTEGER 
		local
			cipher_text_c_string: C_STRING
			plain_text_c_string: C_STRING
		do
			create cipher_text_c_string.make (cipher_text)
			create plain_text_c_string.make (plain_text)
			Result := c_crypto_xchacha20_ctr (cipher_text_c_string.item, plain_text_c_string.item, text_size, key, nonce, ctr)
		ensure
			instance_free: class
		end

	crypto_ietf_chacha20_ctr (cipher_text: STRING_8; plain_text: STRING_8; text_size: INTEGER; key: POINTER; nonce: POINTER; ctr: INTEGER): INTEGER 
		local
			cipher_text_c_string: C_STRING
			plain_text_c_string: C_STRING
		do
			create cipher_text_c_string.make (cipher_text)
			create plain_text_c_string.make (plain_text)
			Result := c_crypto_ietf_chacha20_ctr (cipher_text_c_string.item, plain_text_c_string.item, text_size, key, nonce, ctr)
		ensure
			instance_free: class
		end

	crypto_poly1305 (mac: POINTER; message: STRING_8; message_size: INTEGER; key: POINTER) 
		local
			message_c_string: C_STRING
		do
			create message_c_string.make (message)
			c_crypto_poly1305 (mac, message_c_string.item, message_size, key)
		ensure
			instance_free: class
		end

	crypto_poly1305_init (ctx: CRYPTO_POLY1305_CTX_STRUCT_API; key: POINTER) 
		do
			c_crypto_poly1305_init (ctx.item, key)
		ensure
			instance_free: class
		end

	crypto_poly1305_update (ctx: CRYPTO_POLY1305_CTX_STRUCT_API; message: STRING_8; message_size: INTEGER) 
		local
			message_c_string: C_STRING
		do
			create message_c_string.make (message)
			c_crypto_poly1305_update (ctx.item, message_c_string.item, message_size)
		ensure
			instance_free: class
		end

	crypto_poly1305_final (ctx: CRYPTO_POLY1305_CTX_STRUCT_API; mac: POINTER) 
		do
			c_crypto_poly1305_final (ctx.item, mac)
		ensure
			instance_free: class
		end

	crypto_x25519_public_key (public_key: POINTER; secret_key: POINTER) 
		do
			c_crypto_x25519_public_key (public_key, secret_key)
		ensure
			instance_free: class
		end

	crypto_x25519 (raw_shared_secret: POINTER; your_secret_key: POINTER; their_public_key: POINTER) 
		do
			c_crypto_x25519 (raw_shared_secret, your_secret_key, their_public_key)
		ensure
			instance_free: class
		end

	crypto_x25519_dirty_small (pk: POINTER; sk: POINTER) 
		do
			c_crypto_x25519_dirty_small (pk, sk)
		ensure
			instance_free: class
		end

	crypto_x25519_dirty_fast (pk: POINTER; sk: POINTER) 
		do
			c_crypto_x25519_dirty_fast (pk, sk)
		ensure
			instance_free: class
		end

	crypto_x25519_inverse (blind_salt: POINTER; private_key: POINTER; curve_point: POINTER) 
		do
			c_crypto_x25519_inverse (blind_salt, private_key, curve_point)
		ensure
			instance_free: class
		end

feature -- Externals

	c_crypto_verify16 (a: POINTER; b: POINTER): INTEGER
		external
			"C inline use <monocypher.h>"
		alias
			"[
				return crypto_verify16 ($a, $b);
			]"
		end

	c_crypto_verify32 (a: POINTER; b: POINTER): INTEGER
		external
			"C inline use <monocypher.h>"
		alias
			"[
				return crypto_verify32 ($a, $b);
			]"
		end

	c_crypto_verify64 (a: POINTER; b: POINTER): INTEGER
		external
			"C inline use <monocypher.h>"
		alias
			"[
				return crypto_verify64 ($a, $b);
			]"
		end

	c_crypto_wipe (secret: POINTER; size: INTEGER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_wipe ((void*)$secret, (size_t)$size);
			]"
		end

	c_crypto_lock (mac: POINTER; cipher_text: POINTER; key: POINTER; nonce: POINTER; plain_text: POINTER; text_size: INTEGER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_lock ($mac, (uint8_t*)$cipher_text, $key, $nonce, (uint8_t const*)$plain_text, (size_t)$text_size);
			]"
		end

	c_crypto_unlock (plain_text: POINTER; key: POINTER; nonce: POINTER; mac: POINTER; cipher_text: POINTER; text_size: INTEGER): INTEGER
		external
			"C inline use <monocypher.h>"
		alias
			"[
				return crypto_unlock ((uint8_t*)$plain_text, $key, $nonce, $mac, (uint8_t const*)$cipher_text, (size_t)$text_size);
			]"
		end

	c_crypto_lock_aead (mac: POINTER; cipher_text: POINTER; key: POINTER; nonce: POINTER; ad: POINTER; ad_size: INTEGER; plain_text: POINTER; text_size: INTEGER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_lock_aead ($mac, (uint8_t*)$cipher_text, $key, $nonce, (uint8_t const*)$ad, (size_t)$ad_size, (uint8_t const*)$plain_text, (size_t)$text_size);
			]"
		end

	c_crypto_unlock_aead (plain_text: POINTER; key: POINTER; nonce: POINTER; mac: POINTER; ad: POINTER; ad_size: INTEGER; cipher_text: POINTER; text_size: INTEGER): INTEGER
		external
			"C inline use <monocypher.h>"
		alias
			"[
				return crypto_unlock_aead ((uint8_t*)$plain_text, $key, $nonce, $mac, (uint8_t const*)$ad, (size_t)$ad_size, (uint8_t const*)$cipher_text, (size_t)$text_size);
			]"
		end

	c_crypto_blake2b (hash: POINTER; message: POINTER; message_size: INTEGER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_blake2b ($hash, (uint8_t const*)$message, (size_t)$message_size);
			]"
		end

	c_crypto_blake2b_init (ctx: POINTER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_blake2b_init ((crypto_blake2b_ctx*)$ctx);
			]"
		end

	c_crypto_blake2b_update (ctx: POINTER; message: POINTER; message_size: INTEGER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_blake2b_update ((crypto_blake2b_ctx*)$ctx, (uint8_t const*)$message, (size_t)$message_size);
			]"
		end

	c_crypto_blake2b_final (ctx: POINTER; hash: POINTER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_blake2b_final ((crypto_blake2b_ctx*)$ctx, (uint8_t*)$hash);
			]"
		end

	c_crypto_blake2b_general_init (ctx: POINTER; hash_size: INTEGER; key: POINTER; key_size: INTEGER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_blake2b_general_init ((crypto_blake2b_ctx*)$ctx, (size_t)$hash_size, (uint8_t const*)$key, (size_t)$key_size);
			]"
		end

	c_crypto_argon2i (hash: POINTER; hash_size: INTEGER; work_area: POINTER; nb_blocks: INTEGER; nb_iterations: INTEGER; password: POINTER; password_size: INTEGER; salt: POINTER; salt_size: INTEGER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_argon2i ((uint8_t*)$hash, (uint32_t)$hash_size, (void*)$work_area, (uint32_t)$nb_blocks, (uint32_t)$nb_iterations, (uint8_t const*)$password, (uint32_t)$password_size, (uint8_t const*)$salt, (uint32_t)$salt_size);
			]"
		end

	c_crypto_argon2i_general (hash: POINTER; hash_size: INTEGER; work_area: POINTER; nb_blocks: INTEGER; nb_iterations: INTEGER; password: POINTER; password_size: INTEGER; salt: POINTER; salt_size: INTEGER; key: POINTER; key_size: INTEGER; ad: POINTER; ad_size: INTEGER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_argon2i_general ((uint8_t*)$hash, (uint32_t)$hash_size, (void*)$work_area, (uint32_t)$nb_blocks, (uint32_t)$nb_iterations, (uint8_t const*)$password, (uint32_t)$password_size, (uint8_t const*)$salt, (uint32_t)$salt_size, (uint8_t const*)$key, (uint32_t)$key_size, (uint8_t const*)$ad, (uint32_t)$ad_size);
			]"
		end

	c_crypto_key_exchange (shared_key: POINTER; your_secret_key: POINTER; their_public_key: POINTER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_key_exchange ($shared_key, $your_secret_key, $their_public_key);
			]"
		end

	c_crypto_sign_public_key (public_key: POINTER; secret_key: POINTER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_sign_public_key ($public_key, $secret_key);
			]"
		end

	c_crypto_sign (signature: POINTER; secret_key: POINTER; public_key: POINTER; message: POINTER; message_size: INTEGER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_sign ($signature, $secret_key, $public_key, (uint8_t const*)$message, (size_t)$message_size);
			]"
		end

	c_crypto_check (signature: POINTER; public_key: POINTER; message: POINTER; message_size: INTEGER): INTEGER
		external
			"C inline use <monocypher.h>"
		alias
			"[
				return crypto_check ($signature, $public_key, (uint8_t const*)$message, (size_t)$message_size);
			]"
		end

	c_crypto_sign_init_first_pass (ctx: POINTER; secret_key: POINTER; public_key: POINTER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_sign_init_first_pass ((crypto_sign_ctx_abstract*)$ctx, $secret_key, $public_key);
			]"
		end

	c_crypto_sign_update (ctx: POINTER; message: POINTER; message_size: INTEGER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_sign_update ((crypto_sign_ctx_abstract*)$ctx, (uint8_t const*)$message, (size_t)$message_size);
			]"
		end

	c_crypto_sign_init_second_pass (ctx: POINTER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_sign_init_second_pass ((crypto_sign_ctx_abstract*)$ctx);
			]"
		end

	c_crypto_sign_final (ctx: POINTER; signature: POINTER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_sign_final ((crypto_sign_ctx_abstract*)$ctx, $signature);
			]"
		end

	c_crypto_check_init (ctx: POINTER; signature: POINTER; public_key: POINTER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_check_init ((crypto_check_ctx_abstract*)$ctx, $signature, $public_key);
			]"
		end

	c_crypto_check_update (ctx: POINTER; message: POINTER; message_size: INTEGER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_check_update ((crypto_check_ctx_abstract*)$ctx, (uint8_t const*)$message, (size_t)$message_size);
			]"
		end

	c_crypto_check_final (ctx: POINTER): INTEGER
		external
			"C inline use <monocypher.h>"
		alias
			"[
				return crypto_check_final ((crypto_check_ctx_abstract*)$ctx);
			]"
		end

	c_crypto_sign_public_key_custom_hash (public_key: POINTER; secret_key: POINTER; hash: POINTER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_sign_public_key_custom_hash ($public_key, $secret_key, (crypto_sign_vtable const*)$hash);
			]"
		end

	c_crypto_sign_init_first_pass_custom_hash (ctx: POINTER; secret_key: POINTER; public_key: POINTER; hash: POINTER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_sign_init_first_pass_custom_hash ((crypto_sign_ctx_abstract*)$ctx, $secret_key, $public_key, (crypto_sign_vtable const*)$hash);
			]"
		end

	c_crypto_check_init_custom_hash (ctx: POINTER; signature: POINTER; public_key: POINTER; hash: POINTER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_check_init_custom_hash ((crypto_check_ctx_abstract*)$ctx, $signature, $public_key, (crypto_sign_vtable const*)$hash);
			]"
		end

	c_crypto_from_eddsa_private (x25519: POINTER; eddsa: POINTER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_from_eddsa_private ($x25519, $eddsa);
			]"
		end

	c_crypto_from_eddsa_public (x25519: POINTER; eddsa: POINTER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_from_eddsa_public ($x25519, $eddsa);
			]"
		end

	c_crypto_hidden_to_curve (curve: POINTER; hidden: POINTER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_hidden_to_curve ($curve, $hidden);
			]"
		end

	c_crypto_curve_to_hidden (hidden: POINTER; curve: POINTER; tweak: INTEGER): INTEGER
		external
			"C inline use <monocypher.h>"
		alias
			"[
				return crypto_curve_to_hidden ($hidden, $curve, (uint8_t)$tweak);
			]"
		end

	c_crypto_hidden_key_pair (hidden: POINTER; secret_key: POINTER; seed: POINTER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_hidden_key_pair ($hidden, $secret_key, $seed);
			]"
		end

	c_crypto_hchacha20 (a_out: POINTER; key: POINTER; in: POINTER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_hchacha20 ($a_out, $key, $in);
			]"
		end

	c_crypto_chacha20 (cipher_text: POINTER; plain_text: POINTER; text_size: INTEGER; key: POINTER; nonce: POINTER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_chacha20 ((uint8_t*)$cipher_text, (uint8_t const*)$plain_text, (size_t)$text_size, $key, $nonce);
			]"
		end

	c_crypto_xchacha20 (cipher_text: POINTER; plain_text: POINTER; text_size: INTEGER; key: POINTER; nonce: POINTER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_xchacha20 ((uint8_t*)$cipher_text, (uint8_t const*)$plain_text, (size_t)$text_size, $key, $nonce);
			]"
		end

	c_crypto_ietf_chacha20 (cipher_text: POINTER; plain_text: POINTER; text_size: INTEGER; key: POINTER; nonce: POINTER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_ietf_chacha20 ((uint8_t*)$cipher_text, (uint8_t const*)$plain_text, (size_t)$text_size, $key, $nonce);
			]"
		end

	c_crypto_chacha20_ctr (cipher_text: POINTER; plain_text: POINTER; text_size: INTEGER; key: POINTER; nonce: POINTER; ctr: INTEGER): INTEGER
		external
			"C inline use <monocypher.h>"
		alias
			"[
				return crypto_chacha20_ctr ((uint8_t*)$cipher_text, (uint8_t const*)$plain_text, (size_t)$text_size, $key, $nonce, (uint64_t)$ctr);
			]"
		end

	c_crypto_xchacha20_ctr (cipher_text: POINTER; plain_text: POINTER; text_size: INTEGER; key: POINTER; nonce: POINTER; ctr: INTEGER): INTEGER
		external
			"C inline use <monocypher.h>"
		alias
			"[
				return crypto_xchacha20_ctr ((uint8_t*)$cipher_text, (uint8_t const*)$plain_text, (size_t)$text_size, $key, $nonce, (uint64_t)$ctr);
			]"
		end

	c_crypto_ietf_chacha20_ctr (cipher_text: POINTER; plain_text: POINTER; text_size: INTEGER; key: POINTER; nonce: POINTER; ctr: INTEGER): INTEGER
		external
			"C inline use <monocypher.h>"
		alias
			"[
				return crypto_ietf_chacha20_ctr ((uint8_t*)$cipher_text, (uint8_t const*)$plain_text, (size_t)$text_size, $key, $nonce, (uint32_t)$ctr);
			]"
		end

	c_crypto_poly1305 (mac: POINTER; message: POINTER; message_size: INTEGER; key: POINTER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_poly1305 ($mac, (uint8_t const*)$message, (size_t)$message_size, $key);
			]"
		end

	c_crypto_poly1305_init (ctx: POINTER; key: POINTER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_poly1305_init ((crypto_poly1305_ctx*)$ctx, $key);
			]"
		end

	c_crypto_poly1305_update (ctx: POINTER; message: POINTER; message_size: INTEGER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_poly1305_update ((crypto_poly1305_ctx*)$ctx, (uint8_t const*)$message, (size_t)$message_size);
			]"
		end

	c_crypto_poly1305_final (ctx: POINTER; mac: POINTER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_poly1305_final ((crypto_poly1305_ctx*)$ctx, $mac);
			]"
		end

	c_crypto_x25519_public_key (public_key: POINTER; secret_key: POINTER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_x25519_public_key ($public_key, $secret_key);
			]"
		end

	c_crypto_x25519 (raw_shared_secret: POINTER; your_secret_key: POINTER; their_public_key: POINTER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_x25519 ($raw_shared_secret, $your_secret_key, $their_public_key);
			]"
		end

	c_crypto_x25519_dirty_small (pk: POINTER; sk: POINTER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_x25519_dirty_small ($pk, $sk);
			]"
		end

	c_crypto_x25519_dirty_fast (pk: POINTER; sk: POINTER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_x25519_dirty_fast ($pk, $sk);
			]"
		end

	c_crypto_x25519_inverse (blind_salt: POINTER; private_key: POINTER; curve_point: POINTER)
		external
			"C inline use <monocypher.h>"
		alias
			"[
				crypto_x25519_inverse ($blind_salt, $private_key, $curve_point);
			]"
		end

feature -- Externals Address

end
