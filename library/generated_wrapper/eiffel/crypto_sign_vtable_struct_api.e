note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class CRYPTO_SIGN_VTABLE_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	hash: POINTER
			-- Access member `hash`
		require
			exists: exists
		do
			Result := c_hash (item)
		ensure
			result_correct: Result = c_hash (item)
		end

	set_hash (a_value: POINTER) 
			-- Change the value of member `hash` to `a_value`.
		require
			exists: exists
		do
			set_c_hash (item, a_value)
		ensure
			hash_set: a_value = hash
		end

	init: POINTER
			-- Access member `init`
		require
			exists: exists
		do
			Result := c_init (item)
		ensure
			result_correct: Result = c_init (item)
		end

	set_init (a_value: POINTER) 
			-- Change the value of member `init` to `a_value`.
		require
			exists: exists
		do
			set_c_init (item, a_value)
		ensure
			init_set: a_value = init
		end

	update: POINTER
			-- Access member `update`
		require
			exists: exists
		do
			Result := c_update (item)
		ensure
			result_correct: Result = c_update (item)
		end

	set_update (a_value: POINTER) 
			-- Change the value of member `update` to `a_value`.
		require
			exists: exists
		do
			set_c_update (item, a_value)
		ensure
			update_set: a_value = update
		end

	final: POINTER
			-- Access member `final`
		require
			exists: exists
		do
			Result := c_final (item)
		ensure
			result_correct: Result = c_final (item)
		end

	set_final (a_value: POINTER) 
			-- Change the value of member `final` to `a_value`.
		require
			exists: exists
		do
			set_c_final (item, a_value)
		ensure
			final_set: a_value = final
		end

	ctx_size: INTEGER
			-- Access member `ctx_size`
		require
			exists: exists
		do
			Result := c_ctx_size (item)
		ensure
			result_correct: Result = c_ctx_size (item)
		end

	set_ctx_size (a_value: INTEGER) 
			-- Change the value of member `ctx_size` to `a_value`.
		require
			exists: exists
		do
			set_c_ctx_size (item, a_value)
		ensure
			ctx_size_set: a_value = ctx_size
		end

feature {NONE} -- Implementation wrapper for struct crypto_sign_vtable

	sizeof_external: INTEGER 
		external
			"C inline use <monocypher.h>"
		alias
			"sizeof(crypto_sign_vtable)"
		end

	c_hash (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <monocypher.h>"
		alias
			"[
				((crypto_sign_vtable*)$an_item)->hash
			]"
		end

	set_c_hash (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <monocypher.h>"
		alias
			"[
				((crypto_sign_vtable*)$an_item)->hash =  (void (*) (uint8_t hash[64], uint8_t const *message, size_t message_size))$a_value
			]"
		ensure
			hash_set: a_value = c_hash (an_item)
		end

	c_init (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <monocypher.h>"
		alias
			"[
				((crypto_sign_vtable*)$an_item)->init
			]"
		end

	set_c_init (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <monocypher.h>"
		alias
			"[
				((crypto_sign_vtable*)$an_item)->init =  (void (*) (void *ctx))$a_value
			]"
		ensure
			init_set: a_value = c_init (an_item)
		end

	c_update (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <monocypher.h>"
		alias
			"[
				((crypto_sign_vtable*)$an_item)->update
			]"
		end

	set_c_update (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <monocypher.h>"
		alias
			"[
				((crypto_sign_vtable*)$an_item)->update =  (void (*) (void *ctx, uint8_t const *message, size_t message_size))$a_value
			]"
		ensure
			update_set: a_value = c_update (an_item)
		end

	c_final (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <monocypher.h>"
		alias
			"[
				((crypto_sign_vtable*)$an_item)->final
			]"
		end

	set_c_final (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <monocypher.h>"
		alias
			"[
				((crypto_sign_vtable*)$an_item)->final =  (void (*) (void *ctx, uint8_t hash[64]))$a_value
			]"
		ensure
			final_set: a_value = c_final (an_item)
		end

	c_ctx_size (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <monocypher.h>"
		alias
			"[
				((crypto_sign_vtable*)$an_item)->ctx_size
			]"
		end

	set_c_ctx_size (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <monocypher.h>"
		alias
			"[
				((crypto_sign_vtable*)$an_item)->ctx_size =  (size_t)$a_value
			]"
		ensure
			ctx_size_set: a_value = c_ctx_size (an_item)
		end

end
