note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class CRYPTO_SIGN_CTX_ABSTRACT_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	hash: detachable CRYPTO_SIGN_VTABLE_STRUCT_API 
			-- Access member `hash`
		require
			exists: exists
		do
			if attached c_hash (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_hash (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_hash (item) 
		end

	set_hash (a_value: CRYPTO_SIGN_VTABLE_STRUCT_API) 
			-- Set member `hash`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_hash (item, a_value.item)
		ensure
			hash_set: attached hash as l_value implies l_value.item = a_value.item
		end

	buf: POINTER
			-- Access member `buf`
		require
			exists: exists
		do
			Result := c_buf (item)
		ensure
			result_correct: Result = c_buf (item)
		end

	pk: POINTER
			-- Access member `pk`
		require
			exists: exists
		do
			Result := c_pk (item)
		ensure
			result_correct: Result = c_pk (item)
		end

feature {NONE} -- Implementation wrapper for struct crypto_sign_ctx_abstract

	sizeof_external: INTEGER 
		external
			"C inline use <monocypher.h>"
		alias
			"sizeof(crypto_sign_ctx_abstract)"
		end

	c_hash (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <monocypher.h>"
		alias
			"[
				((crypto_sign_ctx_abstract*)$an_item)->hash
			]"
		end

	set_c_hash (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <monocypher.h>"
		alias
			"[
				((crypto_sign_ctx_abstract*)$an_item)->hash =  (crypto_sign_vtable const*)$a_value
			]"
		ensure
			hash_set: a_value = c_hash (an_item)
		end

	c_buf (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <monocypher.h>"
		alias
			"[
				((crypto_sign_ctx_abstract*)$an_item)->buf
			]"
		end

	c_pk (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <monocypher.h>"
		alias
			"[
				((crypto_sign_ctx_abstract*)$an_item)->pk
			]"
		end

end
